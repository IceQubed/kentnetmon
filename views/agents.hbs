<head>
    <!-- Load c3.css -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/c3/0.4.11/c3.css" rel="stylesheet" type="text/css">

    <!-- Load d3.js and c3.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.17/d3.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/c3/0.4.11/c3.min.js"></script>




    <script>
        function startTimer(duration, display) {
            var timer = duration,
                minutes, seconds;
            setInterval(function() {
                minutes = parseInt(timer / 60, 10)
                seconds = parseInt(timer % 60, 10);

                minutes = minutes < 10 ? "0" + minutes : minutes;
                seconds = seconds < 10 ? "0" + seconds : seconds;

                display.textContent = minutes + ":" + seconds + " left in test before page refresh";

                if (--timer < 0) {
                    timer = duration;
                }
            }, 1000);
        }

    </script>

    <script>
        function runTest(agentID) {
            var xmlhttp = new XMLHttpRequest(),
                timerTime = 11,
                timerRefreshTime = 11000,
                display = document.querySelector('#runTestTimer');

            xmlhttp.addEventListener('readystatechange', function() {
                if (this.readyState == 4) {
                    document.getElementById('demo').innerHTML = 'this.responseText';
                }
            });
            xmlhttp.open('GET', '/iperf/' + agentID, true);
            xmlhttp.send();

            startTimer(timerTime, display);
            setTimeout(function() {
                location.reload();
            }, timerRefreshTime);
        }

        function runTestUDP(agentID) {
            var xmlhttp = new XMLHttpRequest(),
                timerTime = 11,
                timerRefreshTime = 11000,
                display = document.querySelector('#runTestUDPTimer');

            xmlhttp.addEventListener('readystatechange', function() {
                if (this.readyState == 4) {
                    document.getElementById('demo').innerHTML = 'this.responseText';
                }
            });
            xmlhttp.open('GET', '/iperfudp/' + agentID, true);
            xmlhttp.send();

            startTimer(timerTime, display);
            setTimeout(function() {
                location.reload();
            }, timerRefreshTime);
        }

        function runBoth(agentID) {
            var test1 = new XMLHttpRequest(),
                test2 = new XMLHttpRequest(),
                runTime = 25,
                refreshTime = 25000,
                test1Time = 13000,
                display = document.querySelector('#runTestBothTimer');

            test1.addEventListener('readystatechange', function() {
                if (this.readyState == 4) {
                    document.getElementById('demo').innerHTML = 'this.responseText';
                }
            });
            test1.open('GET', '/iperfudp/' + agentID, true);
            test1.send();

            test2.addEventListener('readystatechange', function() {
                if (this.readyState == 4) {
                    document.getElementById('demo').innerHTML = 'this.responseText';
                }
            });


            setTimeout(function() {
                test2.open('GET', '/iperf/' + agentID, true);
                test2.send();
            }, test1Time);


            startTimer(runTime, display);
            setTimeout(function() {
                location.reload();
            }, refreshTime);
        }

    </script>

    <script>
        function deleteAgent(agentID) {
            if (confirm('Are you sure you want to delete this agent? \nAgents cannot be undeleted and will have to be re-added!')) {
                var xmlhttp;
                xmlhttp = new XMLHttpRequest();

                xmlhttp.onreadystatechange = function() {
                    if (this.readyState == 4) {
                        document.getElementById('demo').innerHTML = this.responseText;
                    }
                };
                xmlhttp.open('GET', '/deleteagent/' + agentID, true);
                xmlhttp.send();
                location.reload();
            }

        }

    </script>

</head>

<body>

    <header>
        <h2>{{title}}</h2>
    </header>

    <nav>
        <ul>
            <li><a href="/">Dashboard</a></li>
            <li><a href="/addagent">Add Agent</a></li>
            <li><a href="/settings">Settings</a></li>
            <li><a href="#">Log out</a></li>
        </ul>
    </nav>

    <div class="content-container">
        {{#each agents}}
        <div class="agents">
            <div class="agent">

                <h1> {{this.name}}</h1>

                <div class="statsandcontrols">
                    <table style="width:100%">
                        <col width="120">
                        <tr>
                            <th>
                                <h2>Details</h2>
                            </th>
                        </tr>
                        <tr></tr>
                        <tr>
                            <th>Location</th>
                            <td>{{this.location}}</td>
                        </tr>
                        <tr>
                            <th>Network Address</th>
                            <td>{{this.ipAddr}}</td>
                        </tr>
                    </table> <br>

                    <h2>Controls</h2><br>
                    <button id="runTestBoth" onclick="runBoth('{{this.id}}')">Run Both Tests (TCP & UDP)</button> <br>
                    <span id="runTestBothTimer"></span><br>
                    <button id="runTest" onclick="runTest('{{this.id}}')">Run Throughput Test (TCP)</button> <br>
                    <span id="runTestTimer"></span><br>
                    <button id="runTestUDP" onclick="runTestUDP('{{this.id}}')">Run Jitter & Packet Loss Test (UDP)</button> <br>
                    <span id="runTestUDPTimer"></span><br>
                    <button id="deleteAgent" onclick="deleteAgent('{{this.id}}')">Delete Agent</button>
                    <p id="demo"></p>
                </div>

                <div class="graphcontainer">
                    <div class="graphTCP" data-agent-tcp-id="{{this.id}}"></div>
                </div>

                <div class="graphcontainer">
                    <div class="graphUDP" data-agent-udp-id="{{this.id}}"></div>
                </div>
            </div>
        </div>
        {{/each}}

    </div>
    <footer class="footer ">Â© Ben Adamson</footer>

    <script src="/javascripts/graphs.js"></script>
    <script src="/javascripts/graphsUDP.js"></script>
</body>
